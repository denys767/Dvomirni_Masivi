#include <iostream>
#include <vector>
#include <algorithm>

// Функція для виведення бінарного числа
void printBinary(const std::vector<std::vector<int>>* binary) {
    for (const auto& bit : *binary) {
        std::cout << bit[0];
    }
    std::cout << std::endl;
}

// Функція для додавання 1 до бінарного числа
void addOneToBinary(std::vector<std::vector<int>>* binary) {
    int carry = 1; // Починаємо з переносу 1
    for (int i = binary->size() - 1; i >= 0; --i) {
        int sum = (*binary)[i][0] + carry;
        (*binary)[i][0] = sum % 2;  // Оновлюємо поточний біт
        carry = sum / 2;         // Оновлюємо перенос

        // Якщо більше немає переносу, можемо завершити раніше
        if (carry == 0) {
            break;
        }
    }

    // Якщо залишився перенос, додаємо новий рядок на початку
    if (carry == 1) {
        binary->insert(binary->begin(), {1});
    }
    }


int main() {
    // Початкове бінарне число: 1100101, представлене як зубчастий масив
    std::vector<std::vector<int>> binary = {{1}, {1}, {0}, {0}, {1}, {0}, {1}};

    // Виведемо початкове число
    std::cout << "Початкове бінарне число: ";
    printBinary(&binary);

    // Додаємо 1 до бінарного числа
    addOneToBinary(&binary);

    // Виведемо результат
    std::cout << "Бінарне число після додавання 1: ";
    printBinary(&binary);

    return 0;
}

/*Пояснення:
Функція printBinary:

Виводить бінарне число, яке зберігається в зубчастому масиві.

Приймає посилання на зубчастий масив binary як параметр і виводить кожен біт в один рядок.


Функція addOneToBinary:


Виконує додавання 1 до бінарного числа.

Починає з правого біта, додає 1, і в разі необхідності переносить 1 на наступні біти зліва.

Якщо після обробки всіх бітів залишається перенос, додає новий біт 1 на початок масиву.


Функція main:


Ініціалізує початкове бінарне число 1100101.

Викликає printBinary для виводу початкового значення.

Викликає addOneToBinary для додавання 1.

Виводить результат знову за допомогою printBinary.*/